services:
  app:
    build:
      context: .
      target: runner
    image: starter-express-prisma-jwt:prod
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgres://postgres:postgres@db:5432/starter?schema=public
      RATE_LIMIT_REDIS_URL: redis://redis:6379
      PORT: 3000
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET:?Set JWT_ACCESS_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:?Set JWT_REFRESH_SECRET}
      CORS_ORIGINS: ${CORS_ORIGINS:?Set CORS_ORIGINS}
      METRICS_ENABLED: ${METRICS_ENABLED:-false}
      METRICS_GUARD: ${METRICS_GUARD:-secret}
      METRICS_GUARD_SECRET: ${METRICS_GUARD_SECRET:-change-me}
    ports:
      - "3000:3000"
    healthcheck:
      test:
        - CMD-SHELL
        - >
          node -e "fetch('http://127.0.0.1:3000/ready').then(r => {
            if (r.status === 200) process.exit(0);
            process.exit(1);
          }).catch(() => process.exit(1));"
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 20s
    restart: unless-stopped

  db:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: starter
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d starter"]
      interval: 5s
      timeout: 5s
      retries: 12

  redis:
    image: redis:7.4-alpine
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 12

volumes:
  postgres_data:
